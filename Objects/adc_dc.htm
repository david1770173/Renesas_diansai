<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\adc_dc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\adc_dc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Mon Apr 15 15:51:56 2024
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Reset_Handler &rArr; main &rArr; hal_entry &rArr; DHT11_Read &rArr; R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5c]">bsp_prv_software_delay_loop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5c]">bsp_prv_software_delay_loop</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3f]">ADCDrvInit</a> from drv_adc.o(.text.ADCDrvInit) referenced from drv_adc.o(.data.gAdcDev)
 <LI><a href="#[40]">ADCDrvRead</a> from drv_adc.o(.text.ADCDrvRead) referenced from drv_adc.o(.data.gAdcDev)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1]">NMI_Handler</a> from bsp_group_irq.o(.text.NMI_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[9]">PendSV_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[1a]">R_ADC_Calibrate</a> from r_adc.o(.text.R_ADC_Calibrate) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[1c]">R_ADC_CallbackSet</a> from r_adc.o(.text.R_ADC_CallbackSet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[1d]">R_ADC_Close</a> from r_adc.o(.text.R_ADC_Close) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[1e]">R_ADC_InfoGet</a> from r_adc.o(.text.R_ADC_InfoGet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[1b]">R_ADC_OffsetSet</a> from r_adc.o(.text.R_ADC_OffsetSet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[12]">R_ADC_Open</a> from r_adc.o(.text.R_ADC_Open) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[18]">R_ADC_Read</a> from r_adc.o(.text.R_ADC_Read) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[19]">R_ADC_Read32</a> from r_adc.o(.text.R_ADC_Read32) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[13]">R_ADC_ScanCfg</a> from r_adc.o(.text.R_ADC_ScanCfg) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[15]">R_ADC_ScanGroupStart</a> from r_adc.o(.text.R_ADC_ScanGroupStart) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[14]">R_ADC_ScanStart</a> from r_adc.o(.text.R_ADC_ScanStart) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[16]">R_ADC_ScanStop</a> from r_adc.o(.text.R_ADC_ScanStop) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[17]">R_ADC_StatusGet</a> from r_adc.o(.text.R_ADC_StatusGet) referenced from r_adc.o(.rodata.g_adc_on_adc)
 <LI><a href="#[29]">R_IOPORT_Close</a> from r_ioport.o(.text.R_IOPORT_Close) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[28]">R_IOPORT_Open</a> from r_ioport.o(.text.R_IOPORT_Open) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2b]">R_IOPORT_PinCfg</a> from r_ioport.o(.text.R_IOPORT_PinCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2c]">R_IOPORT_PinEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PinEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2d]">R_IOPORT_PinEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PinEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2e]">R_IOPORT_PinRead</a> from r_ioport.o(.text.R_IOPORT_PinRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2f]">R_IOPORT_PinWrite</a> from r_ioport.o(.text.R_IOPORT_PinWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[2a]">R_IOPORT_PinsCfg</a> from r_ioport.o(.text.R_IOPORT_PinsCfg) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[30]">R_IOPORT_PortDirectionSet</a> from r_ioport.o(.text.R_IOPORT_PortDirectionSet) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[31]">R_IOPORT_PortEventInputRead</a> from r_ioport.o(.text.R_IOPORT_PortEventInputRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[32]">R_IOPORT_PortEventOutputWrite</a> from r_ioport.o(.text.R_IOPORT_PortEventOutputWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[33]">R_IOPORT_PortRead</a> from r_ioport.o(.text.R_IOPORT_PortRead) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[34]">R_IOPORT_PortWrite</a> from r_ioport.o(.text.R_IOPORT_PortWrite) referenced from r_ioport.o(.rodata.g_ioport_on_ioport)
 <LI><a href="#[23]">R_SCI_I2C_Abort</a> from r_sci_i2c.o(.text.R_SCI_I2C_Abort) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[25]">R_SCI_I2C_CallbackSet</a> from r_sci_i2c.o(.text.R_SCI_I2C_CallbackSet) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[27]">R_SCI_I2C_Close</a> from r_sci_i2c.o(.text.R_SCI_I2C_Close) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[20]">R_SCI_I2C_Open</a> from r_sci_i2c.o(.text.R_SCI_I2C_Open) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[21]">R_SCI_I2C_Read</a> from r_sci_i2c.o(.text.R_SCI_I2C_Read) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[24]">R_SCI_I2C_SlaveAddressSet</a> from r_sci_i2c.o(.text.R_SCI_I2C_SlaveAddressSet) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[26]">R_SCI_I2C_StatusGet</a> from r_sci_i2c.o(.text.R_SCI_I2C_StatusGet) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[22]">R_SCI_I2C_Write</a> from r_sci_i2c.o(.text.R_SCI_I2C_Write) referenced from r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
 <LI><a href="#[3b]">R_SCI_UART_Abort</a> from r_sci_uart.o(.text.R_SCI_UART_Abort) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[39]">R_SCI_UART_BaudSet</a> from r_sci_uart.o(.text.R_SCI_UART_BaudSet) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[3c]">R_SCI_UART_CallbackSet</a> from r_sci_uart.o(.text.R_SCI_UART_CallbackSet) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[3d]">R_SCI_UART_Close</a> from r_sci_uart.o(.text.R_SCI_UART_Close) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[3a]">R_SCI_UART_InfoGet</a> from r_sci_uart.o(.text.R_SCI_UART_InfoGet) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[36]">R_SCI_UART_Open</a> from r_sci_uart.o(.text.R_SCI_UART_Open) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[37]">R_SCI_UART_Read</a> from r_sci_uart.o(.text.R_SCI_UART_Read) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[3e]">R_SCI_UART_ReadStop</a> from r_sci_uart.o(.text.R_SCI_UART_ReadStop) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[38]">R_SCI_UART_Write</a> from r_sci_uart.o(.text.R_SCI_UART_Write) referenced from r_sci_uart.o(.rodata.g_uart_on_sci)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text.Reset_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[7]">SVC_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[a]">SysTick_Handler</a> from hal_systick.o(.text.SysTick_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text.Default_Handler) referenced from startup.o(.fixed_vectors)
 <LI><a href="#[11]">fputc</a> from drv_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1f]">sci_i2c2_master_callback</a> from hal_entry.o(.text.sci_i2c2_master_callback) referenced from hal_data.o(.rodata.g_i2c2_cfg)
 <LI><a href="#[10]">sci_i2c_tei_isr</a> from r_sci_i2c.o(.text.sci_i2c_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[f]">sci_i2c_txi_isr</a> from r_sci_i2c.o(.text.sci_i2c_txi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[35]">sci_uart7_callback</a> from drv_uart.o(.text.sci_uart7_callback) referenced from hal_data.o(.rodata.g_uart7_cfg)
 <LI><a href="#[e]">sci_uart_eri_isr</a> from r_sci_uart.o(.text.sci_uart_eri_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[b]">sci_uart_rxi_isr</a> from r_sci_uart.o(.text.sci_uart_rxi_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[d]">sci_uart_tei_isr</a> from r_sci_uart.o(.text.sci_uart_tei_isr) referenced from vector_data.o(.application_vectors)
 <LI><a href="#[c]">sci_uart_txi_isr</a> from r_sci_uart.o(.text.sci_uart_txi_isr) referenced from vector_data.o(.application_vectors)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[73]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_rxi_isr
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[80]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[81]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[83]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[47]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[84]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>ADCGetDevice</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_adc.o(.text.ADCGetDevice))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[54]"></a>DHT11_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_dht11.o(.text.DHT11_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DHT11_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[56]"></a>DHT11_Read</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, bsp_dht11.o(.text.DHT11_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DHT11_Read &rArr; R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinWrite
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[57]"></a>DHT11_ReadByte</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, bsp_dht11.o(.text.DHT11_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DHT11_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinRead
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[85]"></a>Default_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler), UNUSED)

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_group_irq.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[1a]"></a>R_ADC_Calibrate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_Calibrate))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[1c]"></a>R_ADC_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_CallbackSet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[1d]"></a>R_ADC_Close</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, r_adc.o(.text.R_ADC_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ADC_Close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[1e]"></a>R_ADC_InfoGet</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, r_adc.o(.text.R_ADC_InfoGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_ADC_InfoGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[1b]"></a>R_ADC_OffsetSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_OffsetSet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[12]"></a>R_ADC_Open</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, r_adc.o(.text.R_ADC_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = R_ADC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_adc_irq_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[18]"></a>R_ADC_Read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_Read))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[19]"></a>R_ADC_Read32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_Read32))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[13]"></a>R_ADC_ScanCfg</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, r_adc.o(.text.R_ADC_ScanCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = R_ADC_ScanCfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[15]"></a>R_ADC_ScanGroupStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_ScanGroupStart))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[14]"></a>R_ADC_ScanStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_ScanStart))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[16]"></a>R_ADC_ScanStop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_ScanStop))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[17]"></a>R_ADC_StatusGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, r_adc.o(.text.R_ADC_StatusGet))
<BR>[Address Reference Count : 1]<UL><LI> r_adc.o(.rodata.g_adc_on_adc)
</UL>
<P><STRONG><a name="[59]"></a>R_BSP_Init_RTC</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_clocks.o(.text.R_BSP_Init_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_BSP_Init_RTC &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5a]"></a>R_BSP_RegisterProtectDisable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>R_BSP_RegisterProtectEnable</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, bsp_register_protection.o(.text.R_BSP_RegisterProtectEnable))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[55]"></a>R_BSP_SoftwareDelay</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, bsp_delay.o(.text.R_BSP_SoftwareDelay))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6a]"></a>R_BSP_SourceClockHzGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_clocks.o(.text.R_BSP_SourceClockHzGet))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
</UL>

<P><STRONG><a name="[6d]"></a>R_BSP_SubClockStabilizeWaitAfterReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_clocks.o(.text.R_BSP_SubClockStabilizeWaitAfterReset))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
</UL>

<P><STRONG><a name="[5d]"></a>R_BSP_WarmStart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_entry.o(.text.R_BSP_WarmStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R_BSP_WarmStart &rArr; R_IOPORT_Open &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[29]"></a>R_IOPORT_Close</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_Close))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[28]"></a>R_IOPORT_Open</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R_IOPORT_Open &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2b]"></a>R_IOPORT_PinCfg</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, r_ioport.o(.text.R_IOPORT_PinCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2c]"></a>R_IOPORT_PinEventInputRead</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2d]"></a>R_IOPORT_PinEventOutputWrite</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PinEventOutputWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_IOPORT_PinEventOutputWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2e]"></a>R_IOPORT_PinRead</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinRead))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_ReadByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2f]"></a>R_IOPORT_PinWrite</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PinWrite))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[2a]"></a>R_IOPORT_PinsCfg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PinsCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = R_IOPORT_PinsCfg &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[30]"></a>R_IOPORT_PortDirectionSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, r_ioport.o(.text.R_IOPORT_PortDirectionSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_IOPORT_PortDirectionSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[31]"></a>R_IOPORT_PortEventInputRead</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventInputRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[32]"></a>R_IOPORT_PortEventOutputWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortEventOutputWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[33]"></a>R_IOPORT_PortRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortRead))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[34]"></a>R_IOPORT_PortWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, r_ioport.o(.text.R_IOPORT_PortWrite))
<BR>[Address Reference Count : 1]<UL><LI> r_ioport.o(.rodata.g_ioport_on_ioport)
</UL>
<P><STRONG><a name="[23]"></a>R_SCI_I2C_Abort</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.R_SCI_I2C_Abort))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[25]"></a>R_SCI_I2C_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.R_SCI_I2C_CallbackSet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[27]"></a>R_SCI_I2C_Close</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.R_SCI_I2C_Close))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[20]"></a>R_SCI_I2C_Open</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, r_sci_i2c.o(.text.R_SCI_I2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = R_SCI_I2C_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[21]"></a>R_SCI_I2C_Read</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_sci_i2c.o(.text.R_SCI_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_I2C_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_i2c_read_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[24]"></a>R_SCI_I2C_SlaveAddressSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.R_SCI_I2C_SlaveAddressSet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[26]"></a>R_SCI_I2C_StatusGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.R_SCI_I2C_StatusGet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[22]"></a>R_SCI_I2C_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, r_sci_i2c.o(.text.R_SCI_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_i2c_read_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_i2c.o(.rodata.g_i2c_master_on_sci)
</UL>
<P><STRONG><a name="[3b]"></a>R_SCI_UART_Abort</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_Abort))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[39]"></a>R_SCI_UART_BaudSet</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, r_sci_uart.o(.text.R_SCI_UART_BaudSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_UART_BaudSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[3c]"></a>R_SCI_UART_CallbackSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_CallbackSet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[3d]"></a>R_SCI_UART_Close</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_Close))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[3a]"></a>R_SCI_UART_InfoGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_InfoGet))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[36]"></a>R_SCI_UART_Open</STRONG> (Thumb, 798 bytes, Stack size 32 bytes, r_sci_uart.o(.text.R_SCI_UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = R_SCI_UART_Open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[37]"></a>R_SCI_UART_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_Read))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[3e]"></a>R_SCI_UART_ReadStop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, r_sci_uart.o(.text.R_SCI_UART_ReadStop))
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[38]"></a>R_SCI_UART_Write</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, r_sci_uart.o(.text.R_SCI_UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = R_SCI_UART_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> r_sci_uart.o(.rodata.g_uart_on_sci)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup.o(.text.Reset_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Reset_Handler &rArr; main &rArr; hal_entry &rArr; DHT11_Read &rArr; R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_systick.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.fixed_vectors)
</UL>
<P><STRONG><a name="[66]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_clocks.o(.text.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, system.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemInit &rArr; R_BSP_WarmStart &rArr; R_IOPORT_Open &rArr; r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_irq_cfg
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_Init_RTC
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_clock_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_WarmStart
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[69]"></a>SystickInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_systick.o(.text.SystickInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystickInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SourceClockHzGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[6b]"></a>UARTDrvInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_uart.o(.text.UARTDrvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTDrvInit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_assert</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_common.o(.text.__aeabi_assert))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCDrvRead
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCDrvInit
</UL>

<P><STRONG><a name="[63]"></a>bsp_clock_init</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, bsp_clocks.o(.text.bsp_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SubClockStabilizeWaitAfterReset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[68]"></a>bsp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>bsp_init_internal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_common.o(.text.bsp_init_internal), UNUSED)

<P><STRONG><a name="[67]"></a>bsp_irq_cfg</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_irq.o(.text.bsp_irq_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_irq_cfg &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5c]"></a>bsp_prv_software_delay_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_delay.o(.text.bsp_prv_software_delay_loop))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_prv_software_delay_loop
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>

<P><STRONG><a name="[11]"></a>fputc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, drv_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[6e]"></a>hal_entry</STRONG> (Thumb, 600 bytes, Stack size 136 bytes, hal_entry.o(.text.hal_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = hal_entry &rArr; DHT11_Read &rArr; R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystickInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_SoftwareDelay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDrvInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCGetDevice
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; hal_entry &rArr; DHT11_Read &rArr; R_IOPORT_PinCfg &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[1f]"></a>sci_i2c2_master_callback</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_entry.o(.text.sci_i2c2_master_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_i2c2_cfg)
</UL>
<P><STRONG><a name="[10]"></a>sci_i2c_tei_isr</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, r_sci_i2c.o(.text.sci_i2c_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sci_i2c_tei_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[f]"></a>sci_i2c_txi_isr</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, r_sci_i2c.o(.text.sci_i2c_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sci_i2c_txi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[35]"></a>sci_uart7_callback</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_uart.o(.text.sci_uart7_callback))
<BR>[Address Reference Count : 1]<UL><LI> hal_data.o(.rodata.g_uart7_cfg)
</UL>
<P><STRONG><a name="[e]"></a>sci_uart_eri_isr</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, r_sci_uart.o(.text.sci_uart_eri_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_uart_eri_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[b]"></a>sci_uart_rxi_isr</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, r_sci_uart.o(.text.sci_uart_rxi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sci_uart_rxi_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[d]"></a>sci_uart_tei_isr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, r_sci_uart.o(.text.sci_uart_tei_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sci_uart_tei_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[c]"></a>sci_uart_txi_isr</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, r_sci_uart.o(.text.sci_uart_txi_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sci_uart_txi_isr &rArr; r_sci_uart_call_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_sci_uart_call_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vector_data.o(.application_vectors)
</UL>
<P><STRONG><a name="[74]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[87]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDrvInit
</UL>

<P><STRONG><a name="[88]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[89]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[70]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_entry
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f]"></a>ADCDrvInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, drv_adc.o(.text.ADCDrvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADCDrvInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.data.gAdcDev)
</UL>
<P><STRONG><a name="[40]"></a>ADCDrvRead</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, drv_adc.o(.text.ADCDrvRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ADCDrvRead
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.data.gAdcDev)
</UL>
<P><STRONG><a name="[58]"></a>r_adc_irq_enable</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, r_adc.o(.text.r_adc_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_ADC_Open
</UL>

<P><STRONG><a name="[5e]"></a>r_ioport_pins_config</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, r_ioport.o(.text.r_ioport_pins_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = r_ioport_pins_config &rArr; bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_vbatt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinsCfg
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_Open
</UL>

<P><STRONG><a name="[5f]"></a>bsp_vbatt_init</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, r_ioport.o(.text.bsp_vbatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_vbatt_init &rArr; R_BSP_RegisterProtectDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectEnable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_BSP_RegisterProtectDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_ioport_pins_config
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_IOPORT_PinCfg
</UL>

<P><STRONG><a name="[60]"></a>sci_i2c_read_write</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, r_sci_i2c.o(.text.sci_i2c_read_write))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_I2C_Write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;R_SCI_I2C_Read
</UL>

<P><STRONG><a name="[72]"></a>r_sci_uart_call_callback</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, r_sci_uart.o(.text.r_sci_uart_call_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = r_sci_uart_call_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_eri_isr
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_tei_isr
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_rxi_isr
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_uart_txi_isr
</UL>

<P><STRONG><a name="[76]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[79]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[78]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
